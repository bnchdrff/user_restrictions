<?php
// $Id$

/**
 * @file
 * Enables restrictions on user names and e-mail addresses.
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_restrictions_form_user_login_alter(&$form, &$form_state) {
  $form['#validate'][] = 'user_restrictions_login_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_restrictions_form_user_login_block_alter(&$form, &$form_state) {
  $form['#validate'][] = 'user_restrictions_login_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_restrictions_form_user_profile_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'user_restrictions_user_profile_form_validate';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function user_restrictions_form_user_register_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'user_restrictions_user_register_form_validate';
}

/**
 * Implements hook_help().
 */
function user_restrictions_help($path, $arg) {
  global $user;

  switch ($path) {
    case 'admin/help#user_restrictions':
      $output = '<p>' . t(
        "The user restrictions module allows you to specify rules for allowable usernames, or e-mail addresses. A rule may either explicitly <q>allow</q> access or <q>deny</q> access based on the rule's <em>Access type</em>, <em>Rule type</em>, and <em>Mask</em>. For <em>Username</em> and <em>E-Mail</em> rule types, if the username or e-mail address of an existing account or new registration matches the <em>Mask</em> of a <q>deny</q> rule, but not an <q>allow</q> rule, then the account will not be created (for new registrations) or able to log in (for existing accounts).
        The user restrictions module could also be used to prevent new users from registering with usernames like <q>Admin</q> or with e-mail addresses from certain domains. Existing logged-in users with e-mail addresses or usernames that match a <q>deny</q> rule (but not an <q>allow</q> rule) are not immediately logged out (but once they log out, may not log back in), Be careful to not create a <q>deny</q> rule that includes your administrative account.
        Visitors attempting to view your site from an IP address or hostname that matches a <q>deny</q> rule will receive a <q>banned address</q> message. Drupal checks incoming addresses for potential bans before any other Drupal modules or themes are loaded."
      ) .'</p>';
    case 'admin/config/people/restrictions':
      return '<p>'. t("Set up rules for allowable usernames and e-mail address. A rule may either explicitly <q>allow</q> access or <q>deny</q> access based on the rule's <em>Access type</em>, <em>Rule type</em>, and <em>Mask</em>. If the username or e-mail address of an existing account or new registration matches a <q>deny</q> rule, but not an <q>allow</q> rule, then the account will not be created (for new registrations) or able to log in (for existing accounts).") . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function user_restrictions_menu() {
  $edit_restrictions = array('edit user restrictions');
  $items = array();

  $items['admin/config/people/restrictions'] = array(
    'title' => 'User restrictions',
    'description' => 'Specify rules for restricted usernames and e-mail addresses.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_restrictions_overview_form'),
    'access arguments' => $edit_restrictions,
    'file' => 'user_restrictions.admin.inc',
  );

  $items['admin/config/people/restrictions/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'user_restrictions.admin.inc',
  );

  $items['admin/config/people/restrictions/add'] = array(
    'title' => 'Add rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_restrictions_edit_rule_form'),
    'access arguments' => $edit_restrictions,
    'type' => MENU_LOCAL_ACTION,
    'file' => 'user_restrictions.admin.inc',
  );

  $items['admin/config/people/restrictions/%user_restrictions/edit'] = array(
    'title' => 'Edit restriction',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_restrictions_edit_rule_form', 4),
    'access arguments' => $edit_restrictions,
    'type' => MENU_CALLBACK,
    'file' => 'user_restrictions.admin.inc',
  );

  $items['admin/config/people/restrictions/%user_restrictions/delete'] = array(
    'title' => 'Delete rule',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_restrictions_delete_rule_form', 4),
    'access arguments' => $edit_restrictions,
    'type' => MENU_CALLBACK,
    'file' => 'user_restrictions.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function user_restrictions_permission() {
  $perms = array(
    'edit user restriction rules' => array(
      'title' => t('Edit user restriction rules'),
      'restrict access' => TRUE,
    ),
    'bypass user restriction rules' => array(
      'title' => t('Bypass user restriction rules'),
      'restrict access' => TRUE,
    ),
    'bypass user restriction rules at login' => array(
      'title' => t('Bypass user restriction rules at login'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}

/**
 * Form validation handler for user_login(), and user_login_block().
 *
 * @see user_login()
 * @see user_login_block()
 */
function user_restrictions_login_form_validate($form, &$form_state) {
  if (!empty($form_state['uid']) && isset($form_state['values']['name'])) {
    $account = user_load($form_state['uid']);
    if (!empty($account)) {
      if (user_access('bypass user restriction rules', $access)) {
        return;
      }

      // Use $account->name for compatibility with modules that allow users to
      // log in using something different from the username.
      $error = user_restrictions_user_check(
        USER_RESTRICTIONS_USERNAME, $account->name, TRUE
      );
      if ($error) {
        // Denied by access rules.
        form_set_error('name', $error);
      }
    }
  }
}

/**
 * Form validation handler for user_profile_form().
 *
 * @see user_profile_form()
 */
function user_restrictions_user_profile_form_validate($form, &$form_state) {
  $account = $form_state['user'];
  if (user_access('bypass user restriction rules')) {
    return;
  }

  if (isset($form_state['values']['name'])) {
    if ($error = user_restrictions_user_check(USER_RESTRICTIONS_USERNAME, $form_state['values']['name'])) {
      form_set_error('name', $error);
    }
  }

  // Validate the e-mail address.
  if ($error = user_restrictions_user_check(USER_RESTRICTIONS_EMAIL, $form_state['values']['mail'])) {
    form_set_error('mail', $error);
  }
}

/**
 * Form validation handler for user_register_form().
 *
 * @see user_register_form()
 */
function user_restrictions_user_register_form_validate($form, &$form_state) {
  if (isset($form_state['values']['name'])) {
    if ($error = user_restrictions_user_check(USER_RESTRICTIONS_USERNAME, $form_state['values']['name'])) {
      form_set_error('name', $error);
    }
  }

  // Validate the e-mail address.
  if ($error = user_restrictions_user_check(USER_RESTRICTIONS_EMAIL, $form_state['values']['mail'])) {
    form_set_error('mail', $error);
  }
}

/**
 * Checks user input against user restrictions.
 *
 * This was handled by drupal_is_denied() in version of Drupal prior to 7.x.
 *
 * @param $type
 *   The type of input to check (USER_RESTRICTIONS_EMAIL,
 *   USER_RESTRICTIONS_USERNAME).
 * @param $mask
 *   The input to check.
 * @param $options
 *   An array of optional options. The actually used options are:
 *   - login: when TRUE, the input comes from the login form;
 *
 * @return
 *   A message error if there are restrictions agains the entered value, or an
 *   empty string if there are no restrictions that do not allow to use the
 *   entered value.
 */
function user_restrictions_user_check($type, $mask, array $options = array()) {
  // We deny access if the only matching records in the {user_restrictions}
  // table have status 0 (deny). If any have status 1 (allow), or if there are
  // no matching records, we allow access.

  $options += array('login' => FALSE);
  $sql = 'SELECT 1 FROM {user_restrictions} WHERE type = :type AND LOWER(:mask) LIKE LOWER(mask) AND status = :status';
  $denied = (
    db_query_range($sql, 0, 1, array(':type' => $type, ':mask' => $mask, ':status' => 0))->fetchField() &&
    !db_query_range($sql, 0, 1, array(':type' => $type, ':mask' => $mask, ':status' => 1))->fetchField()
  );
  if (!$denied) {
    return '';
  }

  return $type == USER_RESTRICTIONS_EMAIL ? t('The email address %email is reserved, and cannot be used.', array('%email' => $mask)) :
    t('The name %name is a reserved username, and cannot be used.', array('%username' => $mask));
}

/**
 * Loads the restriction rule from the database.
 *
 * @param $urid
 *   The ID of the restriction rule.
 */
function user_restrictions_load($urid) {
  $rule = db_query('SELECT * FROM {user_restrictions} WHERE urid = :urid', array(':urid' => $urid))
    ->fetchObject();

  return empty($rule) ? FALSE : $rule;
}
